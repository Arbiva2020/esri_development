{"version":3,"file":"tile.js","sourceRoot":"","sources":["../../../../src/components/tile/tile.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Component, Element, Fragment, h, Prop, VNode } from \"@stencil/core\";\nimport {\n  ConditionalSlotComponent,\n  connectConditionalSlotComponent,\n  disconnectConditionalSlotComponent,\n} from \"../../utils/conditionalSlot\";\nimport { getSlotted } from \"../../utils/dom\";\nimport {\n  connectInteractive,\n  disconnectInteractive,\n  InteractiveComponent,\n  updateHostInteraction,\n} from \"../../utils/interactive\";\nimport { SLOTS } from \"./resources\";\n\n/**\n * @slot content-start - A slot for adding non-actionable elements before the component's content.\n * @slot content-end - A slot for adding non-actionable elements after the component's content.\n */\n@Component({\n  tag: \"calcite-tile\",\n  styleUrl: \"tile.scss\",\n  shadow: true,\n})\nexport class Tile implements ConditionalSlotComponent, InteractiveComponent {\n  //--------------------------------------------------------------------------\n  //\n  //  Properties\n  //\n  //--------------------------------------------------------------------------\n\n  /**\n   * When `true`, the component is active.\n   */\n  @Prop({ reflect: true }) active = false;\n\n  /**\n   * A description for the component, which displays below the heading.\n   */\n  @Prop({ reflect: true }) description: string;\n\n  /**\n   * When `true`, interaction is prevented and the component is displayed with lower opacity.\n   */\n  @Prop({ reflect: true }) disabled = false;\n\n  /**\n   * The component's embed mode.\n   *\n   * When `true`, renders without a border and padding for use by other components.\n   */\n  @Prop({ reflect: true }) embed = false;\n\n  /**\n   * The focused state of the component.\n   *\n   * @internal\n   */\n  @Prop({ reflect: true }) focused = false;\n\n  /** The component header text, which displays between the icon and description. */\n  @Prop({ reflect: true }) heading: string;\n\n  /** When `true`, the component is not displayed and is not focusable.  */\n  @Prop({ reflect: true }) hidden = false;\n\n  /** When embed is `\"false\"`, the URL for the component. */\n  @Prop({ reflect: true }) href: string;\n\n  /** Specifies an icon to display. */\n  @Prop({ reflect: true }) icon: string;\n\n  /** When `true`, the icon will be flipped when the element direction is right-to-left (`\"rtl\"`). */\n\n  @Prop({ reflect: true }) iconFlipRtl = false;\n\n  // --------------------------------------------------------------------------\n  //\n  //  Private Properties\n  //\n  // --------------------------------------------------------------------------\n\n  @Element() el: HTMLCalciteTileElement;\n\n  // --------------------------------------------------------------------------\n  //\n  //  Lifecycle\n  //\n  // --------------------------------------------------------------------------\n\n  connectedCallback(): void {\n    connectConditionalSlotComponent(this);\n    connectInteractive(this);\n  }\n\n  disconnectedCallback(): void {\n    disconnectConditionalSlotComponent(this);\n    disconnectInteractive(this);\n  }\n\n  componentDidRender(): void {\n    updateHostInteraction(this);\n  }\n\n  // --------------------------------------------------------------------------\n  //\n  //  Render Methods\n  //\n  // --------------------------------------------------------------------------\n\n  renderTile(): VNode {\n    const { icon, el, heading, description, iconFlipRtl } = this;\n    const isLargeVisual = heading && icon && !description;\n    const iconStyle = isLargeVisual\n      ? {\n          height: \"64px\",\n          width: \"64px\",\n        }\n      : undefined;\n\n    return (\n      <div class={{ container: true, \"large-visual\": isLargeVisual }}>\n        {icon && (\n          <div class=\"icon\">\n            <calcite-icon flipRtl={iconFlipRtl} icon={icon} scale=\"l\" style={iconStyle} />\n          </div>\n        )}\n        <div class=\"content-container\">\n          {getSlotted(el, SLOTS.contentStart) ? (\n            <div class=\"content-slot-container\">\n              <slot name={SLOTS.contentStart} />\n            </div>\n          ) : null}\n          <div class=\"content\">\n            {heading && <div class=\"heading\">{heading}</div>}\n            {description && <div class=\"description\">{description}</div>}\n          </div>\n          {getSlotted(el, SLOTS.contentEnd) ? (\n            <div class=\"content-slot-container\">\n              <slot name={SLOTS.contentEnd} />\n            </div>\n          ) : null}\n        </div>\n      </div>\n    );\n  }\n\n  render(): VNode {\n    return (\n      <Fragment>\n        {this.href ? (\n          <calcite-link disabled={this.disabled} href={this.href}>\n            {this.renderTile()}\n          </calcite-link>\n        ) : (\n          this.renderTile()\n        )}\n      </Fragment>\n    );\n  }\n}\n"]}