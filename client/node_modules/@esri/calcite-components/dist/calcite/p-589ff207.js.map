{"version":3,"names":["isFirefox","test","getUserAgentString","interactiveElementToParent","WeakMap","interceptedClick","disabled","this","HTMLElement","prototype","click","call","onPointerDown","event","interactiveElement","target","get","preventDefault","nonBubblingWhenDisabledMouseEvents","onNonBubblingWhenDisabledMouseEvent","stopImmediatePropagation","captureOnlyOptions","capture","updateHostInteraction","component","hostIsTabbable","el","setAttribute","contains","document","activeElement","blur","blockInteraction","restoreInteraction","removeAttribute","addInteractionListeners","getParentElement","element","addEventListener","forEach","removeInteractionListeners","removeEventListener","connectInteractive","parent","parentElement","set","disconnectInteractive","delete"],"sources":["src/utils/interactive.ts"],"sourcesContent":["import { getUserAgentString } from \"./browser\";\n\nexport interface InteractiveComponent {\n  /**\n   * The host element.\n   */\n  readonly el: HTMLElement;\n\n  /**\n   * When true, prevents user interaction.\n   *\n   * Notes:\n   *\n   * This prop should use the @Prop decorator and reflect.\n   * The `disabled` Sass mixin must be added to the component's stylesheet.\n   */\n  disabled: boolean;\n}\n\ntype HostIsTabbablePredicate = () => boolean;\n\n/**\n * Exported for testing purposes only.\n *\n * @internal\n */\nexport type InteractiveHTMLElement = HTMLElement & Pick<InteractiveComponent, \"disabled\">;\n\n// ⚠️ browser-sniffing is not a best practice and should be avoided ⚠️\nconst isFirefox = /firefox/i.test(getUserAgentString());\n\ntype ParentElement<T extends HTMLElement = HTMLElement> = T | null;\n\nconst interactiveElementToParent: WeakMap<InteractiveHTMLElement, ParentElement> | null = isFirefox\n  ? new WeakMap()\n  : null;\n\nfunction interceptedClick(): void {\n  const { disabled } = this as InteractiveHTMLElement;\n\n  if (!disabled) {\n    HTMLElement.prototype.click.call(this);\n  }\n}\n\nfunction onPointerDown(event: PointerEvent): void {\n  const interactiveElement = event.target as InteractiveHTMLElement;\n\n  if (isFirefox && !interactiveElementToParent.get(interactiveElement)) {\n    return;\n  }\n\n  const { disabled } = interactiveElement;\n\n  if (disabled) {\n    // prevent click from moving focus on host\n    event.preventDefault();\n  }\n}\n\nconst nonBubblingWhenDisabledMouseEvents = [\"mousedown\", \"mouseup\", \"click\"];\n\nfunction onNonBubblingWhenDisabledMouseEvent(event: MouseEvent): void {\n  if (isFirefox && !interactiveElementToParent.get(event.target as InteractiveHTMLElement)) {\n    return;\n  }\n\n  const { disabled } = event.target as InteractiveHTMLElement;\n\n  // prevent disallowed mouse events from being emitted on the disabled host (per https://github.com/whatwg/html/issues/5886)\n  //⚠ we generally avoid stopping propagation of events, but this is needed to adhere to the intended spec changes above ⚠\n  if (disabled) {\n    event.stopImmediatePropagation();\n    event.preventDefault();\n  }\n}\n\nconst captureOnlyOptions = { capture: true } as const;\n\n/**\n * This helper updates the host element to prevent keyboard interaction on its subtree and sets the appropriate aria attribute for accessibility.\n *\n * This should be used in the `componentDidRender` lifecycle hook.\n *\n * **Notes**\n *\n * this util is not needed for simple components whose root element or elements are an interactive component (custom element or native control). For those cases, set the `disabled` props on the root components instead.\n * technically, users can override `tabindex` and restore keyboard navigation, but this will be considered user error\n *\n * @param component\n * @param hostIsTabbable – when set to true or its predicate returns true, the host is tabbable and will be managed by the helper. Set to \"managed\" for cases where a component's parent determines which item is tabbable (i.e., sets `tabindex` to allow tabbing).\n */\nexport function updateHostInteraction(\n  component: InteractiveComponent,\n  hostIsTabbable: boolean | HostIsTabbablePredicate | \"managed\" = false\n): void {\n  if (component.disabled) {\n    component.el.setAttribute(\"tabindex\", \"-1\");\n    component.el.setAttribute(\"aria-disabled\", \"true\");\n\n    if (component.el.contains(document.activeElement)) {\n      (document.activeElement as HTMLElement).blur();\n    }\n\n    blockInteraction(component);\n\n    return;\n  }\n\n  restoreInteraction(component);\n\n  if (typeof hostIsTabbable === \"function\") {\n    component.el.setAttribute(\"tabindex\", hostIsTabbable.call(component) ? \"0\" : \"-1\");\n  } else if (hostIsTabbable === true) {\n    component.el.setAttribute(\"tabindex\", \"0\");\n  } else if (hostIsTabbable === false) {\n    component.el.removeAttribute(\"tabindex\");\n  } else {\n    // noop for \"managed\" as owning component will manage its tab index\n  }\n\n  component.el.removeAttribute(\"aria-disabled\");\n}\n\nfunction blockInteraction(component: InteractiveComponent): void {\n  component.el.click = interceptedClick;\n  addInteractionListeners(isFirefox ? getParentElement(component) : component.el);\n}\n\nfunction addInteractionListeners(element: HTMLElement): void {\n  if (!element) {\n    // this path is only applicable to Firefox\n    return;\n  }\n\n  element.addEventListener(\"pointerdown\", onPointerDown, captureOnlyOptions);\n  nonBubblingWhenDisabledMouseEvents.forEach((event) =>\n    element.addEventListener(event, onNonBubblingWhenDisabledMouseEvent, captureOnlyOptions)\n  );\n}\n\nfunction getParentElement(component: InteractiveComponent): ParentElement {\n  return interactiveElementToParent.get(component.el as InteractiveHTMLElement);\n}\n\nfunction restoreInteraction(component: InteractiveComponent): void {\n  delete component.el.click; // fallback on HTMLElement.prototype.click\n  removeInteractionListeners(isFirefox ? getParentElement(component) : component.el);\n}\n\nfunction removeInteractionListeners(element: HTMLElement): void {\n  if (!element) {\n    // this path is only applicable to Firefox\n    return;\n  }\n\n  element.removeEventListener(\"pointerdown\", onPointerDown, captureOnlyOptions);\n  nonBubblingWhenDisabledMouseEvents.forEach((event) =>\n    element.removeEventListener(event, onNonBubblingWhenDisabledMouseEvent, captureOnlyOptions)\n  );\n}\n\n/**\n * This utility helps disable components consistently in Firefox.\n *\n * It needs to be called in `connectedCallback` and is only needed for Firefox as it does not call capture event listeners before non-capture ones (see https://bugzilla.mozilla.org/show_bug.cgi?id=1731504).\n *\n * @param component\n */\nexport function connectInteractive(component: InteractiveComponent): void {\n  if (!component.disabled || !isFirefox) {\n    return;\n  }\n\n  const parent =\n    component.el.parentElement || component.el; /* assume element is host if it has no parent when connected */\n  interactiveElementToParent.set(component.el as InteractiveHTMLElement, parent);\n  blockInteraction(component);\n}\n\n/**\n * This utility restores interactivity to disabled components consistently in Firefox.\n *\n * It needs to be called in `disconnectedCallback` and is only needed for Firefox as it does not call capture event listeners before non-capture ones (see https://bugzilla.mozilla.org/show_bug.cgi?id=1731504).\n *\n * @param component\n */\nexport function disconnectInteractive(component: InteractiveComponent): void {\n  if (!isFirefox) {\n    return;\n  }\n\n  // always remove on disconnect as render or connect will restore it\n  interactiveElementToParent.delete(component.el as InteractiveHTMLElement);\n  restoreInteraction(component);\n}\n"],"mappings":";;;;;oCA6BA,MAAMA,EAAY,WAAWC,KAAKC,KAIlC,MAAMC,EAAoFH,EACtF,IAAII,QACJ,KAEJ,SAASC,IACP,MAAMC,SAAEA,GAAaC,KAErB,IAAKD,EAAU,CACbE,YAAYC,UAAUC,MAAMC,KAAKJ,K,CAErC,CAEA,SAASK,EAAcC,GACrB,MAAMC,EAAqBD,EAAME,OAEjC,GAAIf,IAAcG,EAA2Ba,IAAIF,GAAqB,CACpE,M,CAGF,MAAMR,SAAEA,GAAaQ,EAErB,GAAIR,EAAU,CAEZO,EAAMI,gB,CAEV,CAEA,MAAMC,EAAqC,CAAC,YAAa,UAAW,SAEpE,SAASC,EAAoCN,GAC3C,GAAIb,IAAcG,EAA2Ba,IAAIH,EAAME,QAAmC,CACxF,M,CAGF,MAAMT,SAAEA,GAAaO,EAAME,OAI3B,GAAIT,EAAU,CACZO,EAAMO,2BACNP,EAAMI,gB,CAEV,CAEA,MAAMI,EAAqB,CAAEC,QAAS,M,SAetBC,EACdC,EACAC,EAAgE,OAEhE,GAAID,EAAUlB,SAAU,CACtBkB,EAAUE,GAAGC,aAAa,WAAY,MACtCH,EAAUE,GAAGC,aAAa,gBAAiB,QAE3C,GAAIH,EAAUE,GAAGE,SAASC,SAASC,eAAgB,CAChDD,SAASC,cAA8BC,M,CAG1CC,EAAiBR,GAEjB,M,CAGFS,EAAmBT,GAEnB,UAAWC,IAAmB,WAAY,CACxCD,EAAUE,GAAGC,aAAa,WAAYF,EAAed,KAAKa,GAAa,IAAM,K,MACxE,GAAIC,IAAmB,KAAM,CAClCD,EAAUE,GAAGC,aAAa,WAAY,I,MACjC,GAAIF,IAAmB,MAAO,CACnCD,EAAUE,GAAGQ,gBAAgB,W,MAK/BV,EAAUE,GAAGQ,gBAAgB,gBAC/B,CAEA,SAASF,EAAiBR,GACxBA,EAAUE,GAAGhB,MAAQL,EACrB8B,EAAwBnC,EAAYoC,EAAiBZ,GAAaA,EAAUE,GAC9E,CAEA,SAASS,EAAwBE,GAC/B,IAAKA,EAAS,CAEZ,M,CAGFA,EAAQC,iBAAiB,cAAe1B,EAAeS,GACvDH,EAAmCqB,SAAS1B,GAC1CwB,EAAQC,iBAAiBzB,EAAOM,EAAqCE,IAEzE,CAEA,SAASe,EAAiBZ,GACxB,OAAOrB,EAA2Ba,IAAIQ,EAAUE,GAClD,CAEA,SAASO,EAAmBT,UACnBA,EAAUE,GAAGhB,MACpB8B,EAA2BxC,EAAYoC,EAAiBZ,GAAaA,EAAUE,GACjF,CAEA,SAASc,EAA2BH,GAClC,IAAKA,EAAS,CAEZ,M,CAGFA,EAAQI,oBAAoB,cAAe7B,EAAeS,GAC1DH,EAAmCqB,SAAS1B,GAC1CwB,EAAQI,oBAAoB5B,EAAOM,EAAqCE,IAE5E,C,SASgBqB,EAAmBlB,GACjC,IAAKA,EAAUlB,WAAaN,EAAW,CACrC,M,CAGF,MAAM2C,EACJnB,EAAUE,GAAGkB,eAAiBpB,EAAUE,GAC1CvB,EAA2B0C,IAAIrB,EAAUE,GAA8BiB,GACvEX,EAAiBR,EACnB,C,SASgBsB,EAAsBtB,GACpC,IAAKxB,EAAW,CACd,M,CAIFG,EAA2B4C,OAAOvB,EAAUE,IAC5CO,EAAmBT,EACrB,Q"}